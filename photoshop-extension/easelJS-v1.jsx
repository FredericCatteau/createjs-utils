// PHOTOSHOP TO EASEL JS SPRITESHEET EXPORTER// enable double clicking from the Macintosh Finder or the Windows Explorer#target photoshop// in case we double clicked the fileapp.bringToFront();// debug level: 0-2 (0:disable, 1:break on error, 2:break at beginning)// $.level = 0;// debugger; // launch debugger on next linefunction main () {    var strtRulerUnits = app.preferences.rulerUnits;    if (strtRulerUnits != Units.PIXELS)    {      app.preferences.rulerUnits = Units.PIXELS;    }    if (app.documents.length == 0)    {      alert ("No document opened");    }        var srcDoc = app.activeDocument;    var destName = "BasicFighter"; // tmp        var txt = "//EaselJS Spritesheet\n";    txt += "if (!window.lib) { window.lib = {}; }\n";    txt += "(function() {\n";    txt += "var spritesheetPath='sprites/" + destName + ".png';\n";        txt += "var "+ destName +" = function() {this.initialize();}\n";        txt += destName + "._SpriteSheet = new createjs.SpriteSheet("        txt += "{images: [spritesheetPath], frames:[";        var w = srcDoc.width ;    var h = srcDoc.height ;        var rows = 8;    var cols = 8;            var destDoc = srcDoc.duplicate(destName, false);         app.preferences.rulerUnits = Units.PIXELS;            //var pasteDoc = app.documents.add(cols*w, rows*h, srcDoc.resolution, "Paste Target", NewDocumentMode.RGB, DocumentFill.TRANSPARENT);    destDoc.resizeCanvas (cols*w, rows*h, AnchorPosition.TOPLEFT);        // select target doc    app.activeDocument = destDoc;        var layerIndex = 0 ;             for ( var i = 0 ; i < cols ; i ++) {                for ( var j = 0 ; j < rows ; j ++) {                        // exit if we did all layers            if(layerIndex>=destDoc.layers.length){                break;            }                                    var layer = destDoc.layers[layerIndex];                        // discard text layers            if (layer.kind == LayerKind.TEXT) {                layerIndex++;                continue;            }                                                            // select the next layer            destDoc.activeLayer = layer;            destDoc.activeLayer.allLocked=false;                        // compute destination            var destx = i*w ;            var desty = j*h ;                        destDoc.activeLayer.translate(destx, desty);                                    // Output text            // x, y, width, height, imageIndex, regX, regY            txt += "\n["+Number(destx)+", "+Number(desty)+", 64, 64, 0, 0, 0],";//"layer: "+ layer.name + "\n";                       layerIndex++;                   }            }    txt += "]}";    txt += ");\n";    txt += "var "+ destName + "_p = " + destName + ".prototype = new createjs.BitmapAnimation();\n";    txt += destName + "_p.BitmapAnimation_initialize = "+ destName + "_p.initialize;\n";    txt += destName + "_p.initialize = function() {\n";	txt += "\tthis.BitmapAnimation_initialize(" + destName + "._SpriteSheet);\n";	txt += "\tthis.paused = false;\n"    txt += "}\n";    txt += "lib."+ destName + " = " + destName + ";\n";            txt += "}());";    saveTxtToDesktop(txt, destName+".js");        savePng(destDoc, destName);    // release refs    srcDoc = null;    pasteDoc = null;             destDoc.close(SaveOptions.DONOTSAVECHANGES);    // restore prefs    if (strtRulerUnits != app.preferences.rulerUnits) {      app.preferences.rulerUnits = strtRulerUnits;    }}function savePng(doc, name) {        var folderName="";    if ($.os.search(/windows/i) != -1) {            folderName = "/c/";        } else {            folderName = "~/Desktop/";        }            var pngFile = new File( folderName + name + ".png" );    var pngFileOptions = new PNGSaveOptions();    doc.saveAs (pngFile, pngFileOptions, true, Extension.LOWERCASE);}function saveTxtToDesktop(pText, pFileName) {    // check to see which platform the script is running on    // to set where to save the log file, and what kind of linefeed to use    if ($.os.search(/windows/i) != -1) {            folderName = "/c/";            fileLineFeed = "windows";        } else {            folderName = "~/Desktop/";            fileLineFeed = "macintosh";        }            // create the log file    fileOut = new File(folderName + pFileName);    // Export to Excel Comma Delimited File instead of a .log file:    // fileOut = new File(folderName + "time_test.csv");    // Use OS specific linefeeds    fileOut.lineFeed = fileLineFeed;    // open the file for writing    fileOut.open("w", "TEXT", "????");    // Write a line to .log file    // use commas as delimiters if you want to open the file in Excel    // use "/r" to add carriage returns    fileOut.write(pText);    // stop writing to the file    fileOut.close();    // Open the file in it's associated application    // .log files are associated with the "Console" on OS X    //fileOut.execute();}main();