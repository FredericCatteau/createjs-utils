// PHOTOSHOP TO EASEL JS SPRITESHEET EXPORTER// enable double clicking from the Macintosh Finder or the Windows Explorer#target photoshop// in case we double clicked the fileapp.bringToFront();// debug level: 0-2 (0:disable, 1:break on error, 2:break at beginning)$.level = 1;// debugger; // launch debugger on next linefunction main () {    var strtRulerUnits = app.preferences.rulerUnits;    if (strtRulerUnits != Units.PIXELS)    {      app.preferences.rulerUnits = Units.PIXELS;    }    if (app.documents.length == 0)    {                alert ("No document opened");    }        var srcDoc = app.activeDocument;    var destName = "BasicFighter"; // tmp            var w = srcDoc.width ;    var h = srcDoc.height ;        // TMP: TODO compute    var rows = 5;    var cols = 5;            var destDoc = srcDoc.duplicate(destName, false);         app.preferences.rulerUnits = Units.PIXELS;            //var pasteDoc = app.documents.add(cols*w, rows*h, srcDoc.resolution, "Paste Target", NewDocumentMode.RGB, DocumentFill.TRANSPARENT);    destDoc.resizeCanvas (cols*w, rows*h, AnchorPosition.TOPLEFT);        // select target doc    app.activeDocument = destDoc;        var layerIndex = 0 ;     var lastIndex = 0 ;        var animsTxt = "animations: {";    var framesTxt = "frames:[";    for( var n = 0 ; n < destDoc.layerSets.length ; n++){                var set = destDoc.layerSets[n];        var setName = set.name;        $.writeln("Set: " + setName);                    for( var i = 0 ; i < set.layers.length ; i++){                        var layer = set.layers[i];            $.writeln("layer: " + layer.name);                        // discard text layers            if (layer.kind == LayerKind.TEXT) {                layerIndex++;                continue;            }                        // select the next layer            destDoc.activeLayer = layer;            destDoc.activeLayer.allLocked=false;                        // compute destination            var destx = (layerIndex % cols) * w;            var desty = (Math.floor(layerIndex/cols)) * h;                        destDoc.activeLayer.translate(destx, desty);                                    // Output text : x, y, width, height, imageIndex, regX, regY            framesTxt += "\r\t[" + Number(destx) + ", " + Number(desty) + ", " + Number(w) + ", " + Number(h) + ", 0, 0, 0],";                       layerIndex++;                                             }            // TODO : multiply frames as required by the animation        animsTxt += "\r\t" + setName + ":{ frames:["+lastIndex+","+(layerIndex-1)+"], next:false},";                lastIndex = layerIndex;            }    var txt = "//EaselJS Spritesheet\r ";    txt += "if (!window.lib) { window.lib = {}; }\r";    txt += "(function() {\r";    txt += "var spritesheetPath='sprites/" + destName + ".png';\r";        txt += "var "+ destName +" = function() {this.initialize();}\r";        txt += destName + "._SpriteSheet = new createjs.SpriteSheet("        txt += "{images: [spritesheetPath], \r";    txt += framesTxt;    txt += "]";    txt += ",\r"+animsTxt;    txt += "}";        txt += "});\r";    txt += "var "+ destName + "_p = " + destName + ".prototype = new createjs.BitmapAnimation();\r";    txt += destName + "_p.BitmapAnimation_initialize = "+ destName + "_p.initialize;\r";    txt += destName + "_p.initialize = function() {\r";	txt += "\tthis.BitmapAnimation_initialize(" + destName + "._SpriteSheet);\r";	txt += "\tthis.paused = false;\r"    txt += "}\r";    txt += "lib."+ destName + " = " + destName + ";\r";    txt += "}());";    // get OS specifics : destination folder and linefeed    var folderName="";       var fileLineFeed;     if ($.os.search(/windows/i) != -1) {            folderName = "/c/";            fileLineFeed = "windows";        } else {            folderName = "~/Desktop/";            fileLineFeed = "macintosh";        }    // save files    savePng(destDoc, folderName + destName + ".png" );        saveTxt(txt, folderName + "rpg"+".js", fileLineFeed);             // close doc    destDoc.close(SaveOptions.DONOTSAVECHANGES);    // release refs    srcDoc = null;    destDoc = null;    // restore prefs    if (strtRulerUnits != app.preferences.rulerUnits) {      app.preferences.rulerUnits = strtRulerUnits;    }}function savePng(doc, filepath) {                var pngFile = new File(filepath);    var pngFileOptions = new PNGSaveOptions();    doc.saveAs (pngFile, pngFileOptions, true, Extension.LOWERCASE);}function saveTxt(pText, filepath, fileLineFeed) {    // create the file    fileOut = new File(filepath);    // Use OS specific linefeeds    fileOut.lineFeed = fileLineFeed;    // open the file for writing    fileOut.open("w", "TEXT", "????");    // Write text to file    // use "/r" to add carriage returns    fileOut.write(pText);    // stop writing to the file    fileOut.close();}main();